正则表达式的强大之处在于特殊符号的应用，特殊符号定义了字符集合、子组匹配、模式重复次数。正是这些特殊符号使得一个正则表达式可以匹配字符串集合而不只是一个字符串。

注1：为了便于理解，难点的地方均用斜体举了栗子。

注2：如果你对正则表达式一头雾水或者看不懂下边这个列表，那么小甲鱼极力推荐你先学习这个：
.
	

表示匹配除了换行符外的任何字符
注：通过设置 re.DOTALL 标志可以使 . 匹配任何字符（包含换行符）

|
	

A | B，表示匹配正则表达式 A 或者 B

^
	

1. （脱字符）匹配输入字符串的开始位置
2. 如果设置了 re.MULTILINE 标志，^ 也匹配换行符之后的位置

$
	

1. 匹配输入字符串的结束位置
2. 如果设置了 re.MULTILINE 标志，$ 也匹配换行符之前的位置

\
	

1. 将一个普通字符变成特殊字符，例如 \d 表示匹配所有十进制数字
2. 解除元字符的特殊功能，例如 \. 表示匹配点号本身
3. 引用序号对应的子组所匹配的字符串
4. 详见下方列举

[...]
	

字符类，匹配所包含的任意一个字符
注1：连字符 - 如果出现在字符串中间表示字符范围描述；如果如果出现在首位则仅作为普通字符
注2：特殊字符仅有反斜线 \ 保持特殊含义，用于转义字符。其它特殊字符如 *、+、? 等均作为普通字符匹配
注3：脱字符 ^ 如果出现在首位则表示匹配不包含其中的任意字符；如果 ^ 出现在字符串中间就仅作为普通字符匹配

{M,N}
	

M 和 N 均为非负整数，其中 M <= N，表示前边的 RE 匹配 M ~ N 次
注1：{M,} 表示至少匹配 M 次
注2：{,N} 等价于 {0,N}
注3：{N} 表示需要匹配 N 次

*
	

匹配前面的子表达式零次或多次，等价于 {0,}

+
	

匹配前面的子表达式一次或多次，等价于 {1,}

?
	

匹配前面的子表达式零次或一次，等价于 {0,1}

*?, +?, ??
	

默认情况下 *、+ 和 ? 的匹配模式是贪
