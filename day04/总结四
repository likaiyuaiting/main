4. static 变量

static变量大致分为三种用法

    用于局部变量中,成为静态局部变量. 静态局部变量有两个用法,记忆功能和全局生存期；

    用于全局变量,主要作用是限制此全局变量被其他的文件调用；

    用于类中的成员.表示这个成员是属于这个类但是不属于类中任意特定对象。

4.1 静态局部变量

静态局部变量属于静态存储方式，它具有以下特点：


(1)静态局部变量在函数内定义 它的生存期为整个源程序，但是其作用域仍与自动变量相同，只能在定义该变量的函数内使用该变量。退出该函数后， 尽管该变量还继续存在，但不能使用它。


(2)允许对构造类静态局部量赋初值 例如数组，若未赋以初值，则由系统自动赋以0值。


(3) 对基本类型的静态局部变量若在说明时未赋以初值，则系统自动赋予0值。而对自动变量不赋初值，则其值是不定的。 根据静态局部变量的特点， 可以看出它是一种生存期为整个源程序的量。虽然离开定义它的函数后不能使用，但如再次调用定义它的函数时，它又可继续使用， 而且保存了前次被调用后留下的值。 因此，当多次调用一个函数且要求在调用之间保留某些变量的值时，可考虑采用静态局部变量。虽然用全局变量也可以达到上述目的，但全局变量有时会造成意外的副作用，因此仍以采用局部静态变量为宜。


举例如下：

void fun()

{

static int a = 1;

a++;

}


在第一次进入这个函数的时候，变量a被初始化为1!并接着自增1，以后每次进入该函数，a就不会被再次初始化了，仅进行自增1的操作;在static发明前，要达到同样的功能，则只能使用全局变量：

int a = 1;

void fun()

{

a++;

}


4.2 静态全局变量

全局变量(外部变量)的之前再加上static 就构成了静态的全局变量。全局变量本身就是静态存储方式， 静态全局变量当然也是静态存储方式。 这两者在存储方式上并无不同。这两者的区别虽在于，非静态全局变量的作用域是整个源程序， 当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。 而静态全局变量则限制了其作用域， 即只在定义该变量的源文件内有效， 在同一源程序的其它源文件中不能使用它。由于静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用， 因此可以避免在其它源文件中引起错误。从以上分析可以看出， 把局部变量改变为静态变量后是改变了它的存储方式即改变了它的生存期。把全局变量改变为静态变量后是改变了它的作用域， 限制了它的使用范围。因此static 这个说明符在不同的地方所起的作用是不同的。


4.3 static的类成员变量

static关键字有两种意思，要看上下文来判断：

1.表示变量是静态存储变量，表示变量存放在静态存储区。

2.表示该变量是内部连接(这种情况是指该变量不在任何{}之内，就象全局变量那样，这时候加上static)，也就是说在其它的.cpp文件中，该变量是不可见的(你不能用)。


5 static 函数 —— 内部函数和外部函数

当一个源程序由多个源文件组成时，C语言根据函数能否被其它源文件中的函数调用，将函数分为内部函数和外部函数。
